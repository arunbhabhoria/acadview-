Q.1- Create a class Animal as a base class and define method animal_attribute. 
 Create another class Tiger which is inheriting Animal and access the base class method.

Sol:-class Animal: #This is the base class Animal #
    legs=4
    eyes=2
    
    def animal_attribute(self):
        print("Tiger have %d legs" %self.legs)
        print("Tiger have %d eyes" %self.eyes)
class Tiger(Animal):#super class Tiger is inherits the property of base class tiger#
    speed='fastest'
    def Tiger_Char(self):
        print("Tiger is:",self.speed)
        
animal=Animal()#This is the object to class Animal#
tiger=Tiger()#This is the object of another class Tiger#
tiger.animal_attribute()#object of class calling the method of its base class#
tiger.Tiger_Char()#Method or function call of class Tiger#

Q.2- What will be the output of following code.
class A:
    def f(self):
        return self.g()

    def g(self):
        return 'A'

class B(A):
    def g(self):
        return 'B'

a = A()
b = B()
print a.f(), b.f()
print a.g(), b.g()
Output:-A B
        A B

Q.4- Create a class Shape.Initialize it with length and breadth Create the method Area.
 Create class rectangle and square which inherits shape and access the method Area.

Sol:-class Shape:
    def __init__(self,length,breadth):
         self.length=length
         self.breadth=breadth
    def Area(self):
        self.m=self.length*self.breadth
        self.n=self.length*self.length
        
        
class Rectangle(Shape):
    
    def name(self,n):
            print("Area of rectangle is:",self.m)
class Square(Shape):
    def sq(self):
        print("Area of square is:",self.n)
        
        
    
a=int(input("Enter lenght:"))
b=int(input("Enter breadth:"))
        
shape=Shape(a,b)
shape.Area() 
rec=Rectangle()
square=Square()
square.sq()





